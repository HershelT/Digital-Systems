class Upgrades {
    field LongNum costOfUpgrade;
    field LongNumbers numbers;

    field int worthOfUpgrade;
    field int multiplier;
    field int count;
    field int cps;
    field int currentCPS;

    // Initialize with set cost given to Upgrades
    constructor Upgrades new(LongNum cost, int worth, int multiply, int amount, int perSecond) {
        let costOfUpgrade = LongNum.new(); // Cost of upgrade
        do costOfUpgrade.addLong(cost);
        let numbers = LongNumbers.new(); // Initialize numbers
        let worthOfUpgrade = worth; //How much you get per interval
        let multiplier = multiply; // How much to increase costOfUpgrade by
        let count = amount; // Number of upgrades
        let cps = perSecond; // Cookies per second
        let currentCPS = 0; // Current cookies per second
        return this;
    }

    method LongNum getCost() {
        return costOfUpgrade;
    }

    method int getAmount() {
        return count;
    }

    method int getWorth() {
        return worthOfUpgrade;
    }

    method int getCPS() {
        return currentCPS;
    }

    // Upgrade by changing price and amount of upgrade
    method void getUpgrade() {
        // Logic that does not get int overflow
        var int divide;
        var LongNum tempMulti;
        var LongNum tempParentesis;
        var LongNum tempCost;


        let tempMulti = LongNum.new();
        let tempParentesis = LongNum.new();
        let tempCost = LongNum.new();

        // Do MATH To Calculate new CostOfUpgrade:
        // costOfUpgrade = costOfUpgrade + (((costOfUpgrade / 100) + 1) * (multiplier - 100));
        do tempCost.addLong(costOfUpgrade);
        do tempCost.divideLong(numbers.getOneHundred());
        do tempParentesis.addLong(numbers.getOne());
        do tempParentesis.addLong(tempCost);

        do tempMulti.addLong(numbers.getFifteen());

        do tempParentesis.multiplyLong(tempMulti);

        do costOfUpgrade.addLong(tempParentesis);

        let count = count + 1;
        let currentCPS = cps * count;

        // Free memory
        do Memory.deAlloc(divide);
        do Memory.deAlloc(tempMulti);
        do Memory.deAlloc(tempParentesis);
        do Memory.deAlloc(tempCost);


        return;
    }
}