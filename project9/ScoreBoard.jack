// Jack program to display the score board of the game
// Including visuals of the cookies and upgrades
class ScoreBoard {
    // Display the number of cookies
    function void printCookies(LongNum cookies) {
        do Output.moveCursor(2, 28);
        do cookies.toString();
        return;
    }
    // Erase the cookie line
    function void eraseCookieLine() {
        // var int i;
        do Output.moveCursor(2, 28);
        // let i = 0;
        do Output.printString("                 ");
        // while (i < 11) {
            // let i = i + 1;
        // }
        // Free memory
        // do Memory.deAlloc(i);

        return;
    }

    function void printTheText() {
        // / Display Cookies per Second
        do Output.moveCursor(7,25);
        do Output.printString("CPS: ");
        // Display the upgrades tempNum
        do Output.moveCursor(0,0);
        do Output.printString("UPGRADES AMOUNT: ");
        // Display the upgrades costs
        do Output.moveCursor(12, 0);
        do Output.printString("COSTS:");

        return;
    }

    // Print the upgrades
    function void printUpgrades(LongNumbers numbers, LongNum cps, Upgrades cursors, Upgrades grandmas, Upgrades farms, Upgrades mines, Upgrades warehouses, Upgrades banks, Array upgrades) {
        var LongNum counter;
        var LongNum tempNum;
        var int i; //used for while loop
        var int position; //Store position of drawing elements
        var Upgrades upgrade; //Store the current upgrade elements
        // Display the cookies per second
        do Output.moveCursor(8, 25);
        do cps.toString();

        // Output the number of upgrades

        // Output the number of cursors
        do Output.moveCursor(2, 0);
        let tempNum = cursors.getAmount();
        do tempNum.toString();
        do Output.printString(" Cursors 'C'");
        // Output the number of grandmas
        do Output.moveCursor(3, 0);
        let tempNum = grandmas.getAmount();
        do tempNum.toString();
        // do Output.printInt(grandmas.getAmount());
        do Output.printString(" Grandmas 'G'");
        // Output the number of farms
        do Output.moveCursor(4, 0);
        let tempNum = farms.getAmount();
        do tempNum.toString();
        // do Output.printInt(farms.getAmount());
        do Output.printString(" Farms 'F'");
        // Output the number of mines
        do Output.moveCursor(5, 0);
        let tempNum = mines.getAmount();
        do tempNum.toString();
        // do Output.printInt(mines.getAmount());
        do Output.printString(" Mines 'M'");
        // Output the number of warehouses
        do Output.moveCursor(6, 0);
        let tempNum = warehouses.getAmount();
        do tempNum.toString();
        // do Output.printInt(warehouses.getAmount());
        do Output.printString(" Warehouses 'W'");
        // Output the number of banks
        do Output.moveCursor(7, 0);
        let tempNum = banks.getAmount();
        do tempNum.toString();
        // do Output.printInt(banks.getAmount());
        do Output.printString(" Banks 'B'");

        // Output the cost of each upgrade
        let position = 15; // Where to print to screen
        while (i < 6) {
            // Get current Upgrade to manage
            let upgrade = upgrades[i];
            do Output.moveCursor(position, 0);
            let tempNum = LongNum.new();
            let tempNum = upgrade.getCost();
            do tempNum.toString();
            if (i = 16) {
                let position = position + 1;
            }
            if (i = 19) {
                let position = position + 1;
            }
            let position = position + 1;
            let i = i + 1;
        }
        
        // Draw the graphics of the upgrades

        let i = 0; // Counter for while loop (current upgrade element)
        let position = 10; // Where to print to screen
        while (i < 6) {
            // Get current Upgrade to manage
            let upgrade = upgrades[i];

            let counter = LongNum.new();
            let tempNum = LongNum.new();
            let tempNum = upgrade.getAmount();
            while (counter.lessThanLong(numbers.getTwentyFive())) {
                if (tempNum.greaterThanLong(counter)) {
                    // Draw the correct purchased upgrade
                    do UpgradeDrawings.drawAtEle(i, (32*position*16) + counter.getRightSide() + 4);
                }
                else {
                    let counter = numbers.getOneHundred();
                }
                do counter.addLong(numbers.getOne());
            }
            let i = i + 1;
            let position = position + 1;
        }

        // Free memory
        do Memory.deAlloc(tempNum);
        do Memory.deAlloc(counter);
        do Memory.deAlloc(i);
        do Memory.deAlloc(position);
        do Memory.deAlloc(upgrade);




        return;
    }
    
}