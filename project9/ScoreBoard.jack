// Jack program to display the score board of the game
// Including visuals of the cookies and upgrades
class ScoreBoard {
    // Display the number of cookies
    function void printCookies(LongNum cookies) {
        do Output.moveCursor(10, 14);
        do cookies.toString();
        do Output.printString("         ");
        return;
    }
    // // Erase the cookie line
    // function void eraseCookieLine() {
    //     // do Output.moveCursor(2, 28);

    //     return;
    // }

    function void printTheText() {
        // Draw the count of cookies
        do Output.moveCursor(9, 14);
        do Output.printString("Cookies:");
        // / Display Cookies per Second
        do Output.moveCursor(12,14);
        do Output.printString("CPS: ");

        // Display the template for all information
        do Output.moveCursor(0,0);
        do Output.printString("Key - Buildings  || Count || CostToUpgrade || Icons");
        do Output.moveCursor(1,0);
        do Output.printString("-----------------||-------||---------------||-------");
        // Display the template
        do Output.moveCursor(2, 0);
        do Output.printString("'C' - Cursors    || 0     ||  15           ||      ");
        do Output.moveCursor(3, 0);
        do Output.printString("'G' - Grandmas   || 0     ||  100          ||      ");
        do Output.moveCursor(4, 0);
        do Output.printString("'F' - Farms      || 0     ||  1000         ||      ");
        do Output.moveCursor(5, 0);
        do Output.printString("'M' - Mines      || 0     ||  5000         ||      ");
        do Output.moveCursor(6, 0);
        do Output.printString("'W' - Warehouses || 0     ||  10000        ||      ");
        do Output.moveCursor(7, 0);
        do Output.printString("'B' - Banks      || 0     ||  100000       ||      ");
        // Draw the icons
        do UpgradeDrawings.drawAtEle(0, 439); // Equation = 32*1*13 + 2 + 21 = 439
        do UpgradeDrawings.drawAtEle(1, 792); // Equation = 32*2*12 + 1 + 23 = 792
        do UpgradeDrawings.drawAtEle(2, 1271); // Equation = 32*3*13 + 2 + 21 = 1271
        do UpgradeDrawings.drawAtEle(3, 1560); // Equation = 32*4*12 + 1 + 23 = 1560
        do UpgradeDrawings.drawAtEle(4, 2103); // Equation = 32*5*13 + 2 + 21 = 2103
        do UpgradeDrawings.drawAtEle(5, 2328); // Equation = 32*6*12 + 1 + 23 = 2328

        // draw directions
        do Output.moveCursor(17, 0);
        do Output.printString("Press 'SPACE'");
        do Output.moveCursor(18, 0);
        do Output.printString("Bake Cookies");


        return;
    }

    // Print the upgrades
    function void printUpgrades(LongNumbers numbers, LongNum cps, Array upgrades, int index) {
        var LongNum counter;
        var LongNum tempNum;
        var int i; //used for while loop
        var int position; //Store position of drawing elements
        var Upgrades upgrade; //Store the current upgrade elements
        
        // Display the cookies per second
        do Output.moveCursor(13, 14);
        do cps.toString();

        // Output the number of upgrades
        let i = 0; // Counter for while loop (current upgrade element)
        let position = 2; // Where to print to screen
        while (i < 6) {
            // Get current Upgrade to manage
            if (i = index) {
                let upgrade = upgrades[i];
                do Output.moveCursor(position, 20);
                let tempNum = upgrade.getAmount();
                do tempNum.toString();
            }
            let i = i + 1;
            let position = position + 1;
        }


        // Output the cost of each upgrade
        let i = 0; // Counter for while loop (current upgrade element)
        let position = 2; // Where to print to screen
        while (i < 6) {
            if (i = index) {
                // Get current Upgrade to manage
                let upgrade = upgrades[i];
                do Output.moveCursor(position, 30);
                let tempNum = LongNum.new();
                let tempNum = upgrade.getCost();
                do tempNum.toString();
            }
            if (i = 16) {
                let position = position + 1;
            }
            if (i = 19) {
                let position = position + 1;
            }
            let position = position + 1;
            let i = i + 1;
        }
        
        // Draw the graphics of the upgrades

        let i = 0; // Counter for while loop (current upgrade element)
        let position = 10; // Where to print to screen
        while (i < 6) {
            if (i = index) {
                // Get current Upgrade to manage
                let upgrade = upgrades[i];
                let counter = LongNum.new();
                let tempNum = LongNum.new();
                let tempNum = upgrade.getAmount();
                while (counter.lessThanLong(numbers.getTwentyFive())) {
                    if (tempNum.greaterThanLong(counter)) {
                        // Draw the correct purchased upgrade
                        do UpgradeDrawings.drawAtEle(i, (32*position*16) + counter.getRightSide() + 7);
                    }
                    else {
                        let counter = numbers.getOneHundred();
                    }
                    do counter.addLong(numbers.getOne());
                }   
            }
            let i = i + 1;
            let position = position + 1;
        }

        // Free memory
        do Memory.deAlloc(tempNum);
        do Memory.deAlloc(counter);
        do Memory.deAlloc(i);
        do Memory.deAlloc(position);
        do Memory.deAlloc(upgrade);


        return;
    }
    
}