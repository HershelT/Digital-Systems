class UpgradeDrawings {
    // call one of the other functions depending on numbers
    function void drawAtEle(int i, int location) {
        if (i = 0) {
            do drawCursor(location);
        }
        if (i = 1) {
            do drawGrandma(location);
        }
        if (i = 2) {
            do drawFarm(location);
        }
        if (i = 3) {
            do drawMine(location);
        }
        if (i = 4) {
            do drawWarehouse(location);
        }
        if (i = 5) {
            do drawBank(location);
        }
        return;



    }
    // Draws a cursor at the given location
    method void drawCursor(int location) {
        var int memAddress; 
        let memAddress = 16384+location;
        // column 0
        do Memory.poke(memAddress +32, 56);
        do Memory.poke(memAddress, 0);
        do Memory.poke(memAddress +64, 40);
        do Memory.poke(memAddress +96, 40);
        do Memory.poke(memAddress +128, 1000);
        do Memory.poke(memAddress +160, 3752);
        do Memory.poke(memAddress +192, 2728);
        do Memory.poke(memAddress +224, 2735);
        do Memory.poke(memAddress +256, 2061);
        do Memory.poke(memAddress +288, 2049);
        do Memory.poke(memAddress +320, 2055);
        do Memory.poke(memAddress +352, 2052);
        do Memory.poke(memAddress +384, 2060);
        do Memory.poke(memAddress +416, 2056);
        do Memory.poke(memAddress +448, 2056);
        do Memory.poke(memAddress +480, 4088);

        // Free memory
        do Memory.deAlloc(memAddress);

        return;
    }

    // Draws a grandma at the given location
    method void drawGrandma(int location) {
        var int memAddress; 
        let memAddress = 16384+location;
        // column 0
        do Memory.poke(memAddress +32, 2016);
        do Memory.poke(memAddress, 0);
        do Memory.poke(memAddress +64, 4080);
        do Memory.poke(memAddress +96, 8184);
        do Memory.poke(memAddress +128, 16380);
        do Memory.poke(memAddress +160, 30750);
        do Memory.poke(memAddress +192, -4489);
        do Memory.poke(memAddress +224, -17443);
        do Memory.poke(memAddress +256, -4489);
        do Memory.poke(memAddress +288, 8196);
        do Memory.poke(memAddress +320, 8772);
        do Memory.poke(memAddress +352, 12684);
        do Memory.poke(memAddress +384, 6168);
        do Memory.poke(memAddress +416, 2016);
        
        // Free memory
        do Memory.deAlloc(memAddress);

        return;
    }

    // Draws a farm at the given location
    method void drawFarm(int location) {
        var int memAddress; 
        let memAddress = 16384+location;
        // column 0
        do Memory.poke(memAddress +32, 120);
        do Memory.poke(memAddress +64, 204);
        do Memory.poke(memAddress +96, 132);
        do Memory.poke(memAddress +128, 132);
        do Memory.poke(memAddress +160, 204);
        do Memory.poke(memAddress +192, 120);
        do Memory.poke(memAddress +224, 48);
        do Memory.poke(memAddress +256, 48);
        do Memory.poke(memAddress +288, 561);
        do Memory.poke(memAddress +320, 819);
        do Memory.poke(memAddress +352, 1023);
        do Memory.poke(memAddress +384, 510);
        do Memory.poke(memAddress +416, 510);
        do Memory.poke(memAddress +448, 510);
        do Memory.poke(memAddress +480, 510);
        do Memory.poke(memAddress +512, 510);

        // Free memory
        do Memory.deAlloc(memAddress);

        return;
    }

    // Draws a mine at the given location
    method void drawMine(int location) {
	    var int memAddress; 
        let memAddress = 16384+location;
        // column 0
        do Memory.poke(memAddress +32, 504);
        do Memory.poke(memAddress, 0);
        do Memory.poke(memAddress +64, 1020);
        do Memory.poke(memAddress +96, 3999);
        do Memory.poke(memAddress +128, 3855);
        do Memory.poke(memAddress +160, 3591);
        do Memory.poke(memAddress +192, 3075);
        do Memory.poke(memAddress +224, 3075);
        do Memory.poke(memAddress +256, 3075);
        do Memory.poke(memAddress +288, 3075);
        do Memory.poke(memAddress +320, 3075);
        do Memory.poke(memAddress +352, 3219);
        do Memory.poke(memAddress +384, 3219);
        do Memory.poke(memAddress +416, 4095);

        // Free memory
        do Memory.deAlloc(memAddress);

        return;
    }

    // Draws a warehouse at the given location
    method void drawWarehouse(int location) {
        var int memAddress; 
        let memAddress = 16384+location;
        // column 0
        do Memory.poke(memAddress +32, 4);
        do Memory.poke(memAddress, 0);
        do Memory.poke(memAddress +64, 14);
        do Memory.poke(memAddress +96, 14);
        do Memory.poke(memAddress +128, 14);
        do Memory.poke(memAddress +160, 511);
        do Memory.poke(memAddress +192, 511);
        do Memory.poke(memAddress +224, 511);
        do Memory.poke(memAddress +256, 443);
        do Memory.poke(memAddress +288, 427);
        do Memory.poke(memAddress +320, 455);
        do Memory.poke(memAddress +352, 511);
        do Memory.poke(memAddress +384, 455);
        do Memory.poke(memAddress +416, 455);
        do Memory.poke(memAddress +448, 455);
        do Memory.poke(memAddress +480, 511);

        // Free memory
        do Memory.deAlloc(memAddress);

        return;
    }

    // Draws a bank at the given location
    method void drawBank(int location) {
        var int memAddress; 
        let memAddress = 16384+location;
        // column 0
        do Memory.poke(memAddress +32, 96);
        do Memory.poke(memAddress, 0);
        do Memory.poke(memAddress +64, 240);
        do Memory.poke(memAddress +96, 504);
        do Memory.poke(memAddress +128, 1020);
        do Memory.poke(memAddress +160, 1950);
        do Memory.poke(memAddress +192, 780);
        do Memory.poke(memAddress +224, 780);
        do Memory.poke(memAddress +256, 780);
        do Memory.poke(memAddress +288, 780);
        do Memory.poke(memAddress +320, 1950);
        do Memory.poke(memAddress +352, 4095);

        // Free memory
        do Memory.deAlloc(memAddress);


        return;
    }
}