class CookieClicker {
    // Define longInt cookies
    field LongNum cookies;
    field LongNum cookiesPerSecond;
    // Store a class that holds LongNum Numkbers such as 0, 1, 2
    field LongNumbers numbers;

    // Setting starting position of cookie
    field int screenMid;
    field int cookieRow; // Row where the cookie will be drawn
    field boolean isDrawingFullCookie; //Flag to track if cookie is pressed

    //Displays cookie count at once
    field boolean displayVisualOfCookies; //Flag to track if cookie is pressed
    field boolean displayVisualOfUpgrades; //Flag to track if cookie is pressed

    //Prev ent spamming with checking if any key is pressed
    field boolean isAnyKeyPressed; // Flag to track if any key is pressed
    field boolean hasAnyUpgrade;

    // count of upgrades
    field int fullCookieTimer; //Timer to track how long the cookie is shown for after pressed

    // Map the keys from keyboard to an associated upgrade
    field int totalAmountOfUpgrades; // Total amount of upgrades  you can get
    field Array keys;
    field Array upgrades;
    
    field int globalTimer; // Timer for cursors

    // UPGRADES 
    field Upgrades cursor; // Cursor upgrade object
    field Upgrades grandma; // Grandma upgrade object
    field Upgrades farm; // Farm upgrade object
    field Upgrades mine; // Mine upgrade object
    field Upgrades warehouse; // Warehouse upgrade object
    field Upgrades bank; // Bank upgrade object

    constructor CookieClicker new() {
        let numbers = LongNumbers.new(); // Initialize numbers which holds common longNums

        // Initialize amount of cookies user starts with
        let cookies = LongNum.new(); // Initialize cookies
        do cookies.addLong(numbers.getFiveMillion()); // Add 5 million cookies

        // Initialize cookies per second
        let cookiesPerSecond = LongNum.new(); 
        do cookiesPerSecond.addLong(numbers.getZero());
        // Position of drawing Cookie
        let screenMid = 32; // Middle of the screen (column  where the cookie will be drawn)
        let cookieRow = 100; // Row where the cookie will be drawn

        // Flags to prevent spamming of keys
        let isAnyKeyPressed = false; // Initialize to false
        // Flag to see if we have any upgrades
        let hasAnyUpgrade = false; // Initialize to false
        
        // Variable for flickering cookie
        let fullCookieTimer = 0;
        let isDrawingFullCookie = false; 

        // Flags to display visuals
        let displayVisualOfCookies = true; // Initialize to false
        let displayVisualOfUpgrades = true; // Initialize to false


        // Timer to count how many seconds have passed (45 frames = 1 second)
        let globalTimer = 0;

        // Initialize upgrades
        // Create new Upgrades object with given (LongNum costToBuy, LongNum startingAmount, LongNum cookiesPerSecond)
        let cursor = Upgrades.new(numbers.getFifteen(), numbers.getZero(), numbers.getOne()); // Create new Upgrades object
        let grandma = Upgrades.new(numbers.getOneHundred(), numbers.getZero(), numbers.getSeven()); // Create new Upgrades object
        let farm = Upgrades.new(numbers.getOneThousand(), numbers.getZero(), numbers.getTwentyFour()); // Create new Upgrades object
        let mine = Upgrades.new(numbers.getFiveThousand(), numbers.getZero(), numbers.getEightySeven()); // Create new Upgrades object
        let warehouse = Upgrades.new(numbers.getTenThousand(), numbers.getZero(), numbers.getThreeHundredSixtyFive()); // Create new Upgrades object
        let bank = Upgrades.new(numbers.getOneHundredThousand(), numbers.getZero(), numbers.getFourteenHundred()); // Create new Upgrades object



        // Store keys in an array and corresponding upgrades (making a map)
        let totalAmountOfUpgrades = 6; // Total amount of upgrades - keys you can get
        let keys = Array.new(totalAmountOfUpgrades); // Create new Array object
        let upgrades = Array.new(totalAmountOfUpgrades); // Create new Array object

        // Set keys 
        let keys[0] = 99; // c key
        let keys[1] = 103; // g key
        let keys[2] = 102; // f key
        let keys[3] = 109; // m key
        let keys[4] = 119; // w key
        let keys[5] = 98; // b key
        // Set upgrades
        let upgrades[0] = cursor; // Cursor upgrade
        let upgrades[1] = grandma; // Grandma upgrade
        let upgrades[2] = farm; // Farm upgrade
        let upgrades[3] = mine; // Mine upgrade
        let upgrades[4] = warehouse; // Warehouse upgrade
        let upgrades[5] = bank; // Bank upgrade

        return this;
    }

    method void run() {
        var char key;
        var int frameCounter;
        var int i;
        var Upgrades upgradeElement;
        // var LongNum tempLongNum;
        // var LongNum tempCost;
        // Draw text onto scren that will stay the entire game
        do ScoreBoard.printTheText(); // Print the text

        //Draw the starting cookie that is not filled in
        do CookieDrawings.drawBigPressedCookie(screenMid + (cookieRow * 32));
        
        // Main game loop
        while (true) {
            let key = Keyboard.keyPressed();
            let  i = 0;

            // Handle key presses
            if (key=0) { // If no key is pressed
                let isAnyKeyPressed = false; // Set flag to false
            } else {
                if (~isAnyKeyPressed) { // If no key was pressed before
                    let isAnyKeyPressed = true; // Set flag to true
                    if (key = 32) { // Spacebar iis pressed
                        do cookies.addLong(numbers.getOne()); // Add one cookie
                        let isDrawingFullCookie = true; // Set flag to draw full cookie
                        let displayVisualOfCookies = true; // Set flag to display cookies
                        let fullCookieTimer = 0; // Reset timer
                    }
                    // Handle logic for pressing keys to buy upgrades
                    else {
                        while (i < totalAmountOfUpgrades) {
                            // If we are selecting any of the keys, go to upgrade mapped to that key
                            if (key = keys[i]) {
                                let upgradeElement = upgrades[i];
                                // Check if we have the correct amount of cookies to buy the upgrade
                                if (cookies.greaterThanOrEqualLong(upgradeElement.getCost())) {
                                    do cookies.subtractLong(upgradeElement.getCost()); // Deduct cost
                                    if (~hasAnyUpgrade) {
                                        let hasAnyUpgrade = true; // Set flag to true
                                    }
                                    do upgradeElement.getUpgrade(); // Upgrade cost and add an upgrade
                                    do cookiesPerSecond.addLong(upgradeElement.getCPS()); // Add CPS from upgrade to cookies per second
                                    let displayVisualOfUpgrades = true; // Set flag to display upgrades
                                    let key = i; // The key that was pressed
                                    let i = totalAmountOfUpgrades; // Break out of loop
                                }
                            }
                            let i = i + 1;
                        }
                    }
                }
            }

            // Handle logic for upgrades (timers and cookies per second)
            // if we have anyUpgrades, every second we will blink the cookie and add the cookies per second
            if (hasAnyUpgrade) {
                let globalTimer = globalTimer + 1;
                // After one second we will blink the cookie and update our cookie count
                if (globalTimer > 45) { 
                    let globalTimer = 0;
                    // add the cookies per second to total cookie count
                    do cookies.addLong(cookiesPerSecond);
                    let displayVisualOfCookies = true;
                    let isDrawingFullCookie = true;
                }
            }

            if (isDrawingFullCookie) {
                do CookieDrawings.drawBigCookie(screenMid + (cookieRow * 32));
                let fullCookieTimer = fullCookieTimer + 1;
                if (fullCookieTimer > 4) { // Show cookie for 20 frames (1 second)
                    let isDrawingFullCookie = false; // Stop drawing full cookie
                    do CookieDrawings.drawBigPressedCookie(screenMid + (cookieRow * 32));
                    let fullCookieTimer = 0; // Reset timer
                }
            }

            //Handles updating of visuals 
            if (displayVisualOfCookies) {
                // Display and update the visuals of the cookies
                do ScoreBoard.printCookies(cookies);
                let displayVisualOfCookies = false;
            }

            if (displayVisualOfUpgrades) {
                // Display and update the visuals of the upgrades
                do ScoreBoard.printUpgrades(numbers, cookiesPerSecond, upgrades, key);
                let displayVisualOfUpgrades = false;
            }

            if (key = 140) { // Escape and leave game
                return;
            }

            if (key = 114)  {// Refresh Screen key ('r')
                do ScoreBoard.printTheText(); // Print the text
                let displayVisualOfUpgrades = true;
                let displayVisualOfCookies = true;
            }
            
            do Sys.wait(5);
        }
        return;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
}