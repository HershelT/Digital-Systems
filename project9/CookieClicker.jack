class CookieClicker {
    field int cookies;
    // field int frameCounter;
    field int cookieWidth;
    field int screenMid;
    field int cookieRow; // Row where the cookie will be drawn
    field boolean isDrawingFullCookie; //Flag to track if cookie is pressed

    //Displays cookie count at once
    field boolean displayVisualOfCookies; //Flag to track if cookie is pressed
    field boolean displayVisualOfUpgrades; //Flag to track if cookie is pressed

    //Prev ent spamming with checking if any key is pressed
    field boolean isAnyKeyPressed; // Flag to track if any key is pressed

    // count of upgrades
    field int fullCookieTimer; //Timer to track how long the cookie is shown for after pressed
    
    // field int cursors; // Number of cursors
    field int cursorTimer; // Timer for cursors
    field Upgrades cursor; // Cursor upgrade object

    // field int grandmas; // Number of grandmas
    field int grandmaTimer; // Timer for grandmas
    field Upgrades grandma; // Grandma upgrade object


    constructor CookieClicker new() {
        let cookies = 10000;
        // let frameCounter = 0;
        let cookieWidth = 32;
        let screenMid = 128 - (cookieWidth / 2); //middle of the screen
        let cookieRow = 32; // Row where the cookie will be drawn

        let displayVisualOfCookies = false; // Initialize to false

        let isAnyKeyPressed = false; // Initialize to false

        let isDrawingFullCookie = false;
        let displayVisualOfUpgrades = false;

        let fullCookieTimer = 0;

        // Initialize upgrades
        let cursorTimer = 0;
        // Create new Upgrades object of cursor for (cost, worth, multiplier)
        let cursor = Upgrades.new(15, 1, 115, 0); // Create new Upgrades object
        
        let grandmaTimer = 0;
        // Create new Upgrades object of grandma for (cost, worth, multiplier)
        let grandma = Upgrades.new(100, 10, 115, 0); // Create new Upgrades object

        return this;
    }

    // HandleCursorLogic()
    method void handleUpgradeLogic() {
        if (cursor.getAmount() > 0) {
            let cursorTimer = cursorTimer + 1;
            if (cursorTimer > 20) { // Every 20 frames (1 second)
                let cookies = cookies + (cursor.getAmount() * cursor.getWorth());
                let cursorTimer = 0;
                // update flag to display the number of cookies
                let displayVisualOfCookies = true;
            }
        }

        // Handle grandma logic
        if (grandma.getAmount() > 0) {
            let grandmaTimer = grandmaTimer + 1;
            if (grandmaTimer > 100) { // Every 100 frames (5 seconds)
                let cookies = cookies + (grandma.getAmount() * grandma.getWorth());
                let grandmaTimer = 0;
                // update flag to display the number of cookies
                let displayVisualOfCookies = true;
            }
        }

        return;
    }


    method int cps() {
        return cursor.getAmount() * cursor.getWorth() + grandma.getAmount() * grandma.getWorth();
    }


    method void run() {
        var char key;
        var int frameCounter;

        //Draw the starting cookie that is not filled in
        do CookieDrawings.drawPressedCookie(screenMid + (cookieRow * 32));
        do Output.moveCursor(1, 24);
        do Output.printString("Spacebar for cookies!");

        // Display the starting amount of cookies and upgrades
        do ScoreBoard.printCookies(cookies);
        do ScoreBoard.printUpgrades(cps(), cursor, grandma);

        while (true) {
            let key = Keyboard.keyPressed();

            //Handles updating of visuals 
            if (displayVisualOfCookies) {
                do ScoreBoard.printCookies(cookies);
                let displayVisualOfCookies = false;
            }

            if (displayVisualOfUpgrades) {
                do ScoreBoard.printUpgrades(cps(), cursor, grandma);
                let displayVisualOfUpgrades = false;
            }


            // Handle key presses
            if (key=0) { // If no key is pressed
                let isAnyKeyPressed = false; // Set flag to false
            } else {
                if (~isAnyKeyPressed) { // If no key was pressed before
                    let isAnyKeyPressed = true; // Set flag to true
                
                    // Check for *new* press of spacebar
                    if (key = 32) { // Spacebar
                        let cookies = cookies + 1;
                        let isDrawingFullCookie = true; // Set flag to draw full cookie
                        let fullCookieTimer = 0; // Reset timer
                        let displayVisualOfCookies = true; // Set flag to display cookies
                        do Sys.wait(5); // Prevents spamming of keys
                    }

                    // Handle upgrades key presses

                    // Cursor upgrade
                    if (key = 99) { // c key
                        if (cookies > (cursor.getCost() - 1)) {
                            let cookies = cookies - cursor.getCost(); // Deduct cost
                            do cursor.getUpgrade(); // Upgrade cursor cost and add a cursor
                            let displayVisualOfUpgrades = true; // Set flag to display upgrades
                            do Sys.wait(5);
                        }
                    }

                    // Grandma upgrade
                    if (key = 103) { // g key
                        if (cookies > (grandma.getCost() - 1)) {
                            let cookies = cookies - grandma.getCost(); // Deduct cost
                            do grandma.getUpgrade(); // Upgrade grandma cost and add a grandma
                            let displayVisualOfUpgrades = true; // Set flag to display upgrades
                            do Sys.wait(5); // Prevents spamming of keys
                        }
                    }
                }
            }
            // Handle logic for upgrades
            do handleUpgradeLogic(); // Handle cursor logic


            let frameCounter = frameCounter + 1;
            if (frameCounter > 10) {
                //Reset frame counter
                let frameCounter = 0;
            }
            // Check if cookie is being pressed and draw the full cookie
            else {
                if (isDrawingFullCookie) {
                    do CookieDrawings.drawCookie(screenMid + (cookieRow * 32));
                    let fullCookieTimer = fullCookieTimer + 1;
                    if (fullCookieTimer > 4) { // Show cookie for 20 frames (1 second)
                        let isDrawingFullCookie = false; // Stop drawing full cookie
                        do CookieDrawings.drawPressedCookie(screenMid + (cookieRow * 32));
                        let fullCookieTimer = 0; // Reset timer
                        do Sys.wait(5); // Prevents spamming of keys
                    }
                }
            }

            if (key = 140) { // Escape
                return;
            }
            
            do Sys.wait(5);
        }
        return;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
}