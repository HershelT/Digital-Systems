class CookieClicker {
    // Define longInt cookies
    field LongNum cookies;

    field int cookies1;
    // field int frameCounter;
    field int cookieWidth;
    field int screenMid;
    field int cookieRow; // Row where the cookie will be drawn
    field boolean isDrawingFullCookie; //Flag to track if cookie is pressed

    //Displays cookie count at once
    field boolean displayVisualOfCookies; //Flag to track if cookie is pressed
    field boolean displayVisualOfUpgrades; //Flag to track if cookie is pressed

    //Prev ent spamming with checking if any key is pressed
    field boolean isAnyKeyPressed; // Flag to track if any key is pressed

    // count of upgrades
    field int fullCookieTimer; //Timer to track how long the cookie is shown for after pressed

    // Store keys in an array and corresponding upgrades
    field int totalAmountOf; // Total amount of upgrades - keys you can get
    field Array keys;
    field Array upgrades;
    
    field int globalTimer; // Timer for cursors

    // UPGRADES 
    field Upgrades cursor; // Cursor upgrade object
    field Upgrades grandma; // Grandma upgrade object
    field Upgrades farm; // Farm upgrade object
    field Upgrades mine; // Mine upgrade object
    field Upgrades warehouse; // Warehouse upgrade object

    constructor CookieClicker new() {
        let cookies = LongNum.new(); // Initialize cookies
        do cookies.add(0); // Initialize cookies to 0
        // Position of drawing Cookie
        let screenMid = 112; // Middle of the screen (column  where the cookie will be drawn)
        let cookieRow = 32; // Row where the cookie will be drawn

        // Flags to prevent spamming of keys
        let isAnyKeyPressed = false; // Initialize to false
        
        // Variable for flickering cookie
        let fullCookieTimer = 0;
        let isDrawingFullCookie = false; 

        // Flags to display visuals
        let displayVisualOfCookies = true; // Initialize to false
        let displayVisualOfUpgrades = true;


        // Timer to count how many seconds have passed (45 frames = 1 second)
        let globalTimer = 0;
        // Initialize upgrades

        // Create new Upgrades object with given (cost, worth, multiplier, amountToStart, cookiesPerSecond)
        let cursor = Upgrades.new(15, 1, 115, 0, 1); // Create new Upgrades object
        let grandma = Upgrades.new(100, 10, 115, 0, 7); // Create new Upgrades object
        let farm = Upgrades.new(1000, 50, 115, 0, 24); // Create new Upgrades object
        let mine = Upgrades.new(5000, 500, 115, 0, 87); // Create new Upgrades object
        let warehouse = Upgrades.new(10000, 1000, 115, 0, 263); // Create new Upgrades object



        // Store keys in an array and corresponding upgrades (making a map)
        let totalAmountOf = 5; // Total amount of upgrades - keys you can get
        let keys = Array.new(totalAmountOf); // Create new Array object
        let upgrades = Array.new(totalAmountOf); // Create new Array object

        // Set keys 
        let keys[0] = 99; // c key
        let keys[1] = 103; // g key
        let keys[2] = 102; // f key
        let keys[3] = 109; // m key
        let keys[4] = 119; // w key
        // Set upgrades
        let upgrades[0] = cursor; // Cursor upgrade
        let upgrades[1] = grandma; // Grandma upgrade
        let upgrades[2] = farm; // Farm upgrade
        let upgrades[3] = mine; // Mine upgrade
        let upgrades[4] = warehouse; // Warehouse upgrade

        return this;
    }

    // Method to handle all the logic from the upgrades to update cookie count
    method void handleUpgradeLogic() {
        var int cps;
        // If we have any upgrades, we will increment the timer
        if (cursor.getTotalCount() > 0) {
            let globalTimer = globalTimer + 1;
            // After one second we will blink the cookie and update our cookie count
            if (globalTimer > 45) { 
                let globalTimer = 0;
                let cps = cps();
                do cookies.add(cps);
                // let cookies = cookies + cps();
                let displayVisualOfCookies = true;
                let isDrawingFullCookie = true;
                // do Memory.deAlloc(cps);
            }
        }
        return;
    }

    // Method to calculate cookies per second
    method int cps() {
        var int totalCPS;
        var Upgrades upgradeElement;
        var int i;
        let totalCPS = 0;
        let i = 0;
        while (i < totalAmountOf) {
            let upgradeElement = upgrades[i];
            let totalCPS = totalCPS + upgradeElement.getCPS();
            let i = i + 1;
        }
        return totalCPS;
    }


    method void run() {
        var char key;
        var int frameCounter;
        var int i;
        var Upgrades upgradeElement;
        var LongNum tempLongNum;
        // Draw text onto scren
        do Output.moveCursor(0, 24);
        do Output.printString("Hit 'SPACE' for Cookies!");
        do Output.moveCursor(1, 28);
        do Output.printString("Cookies:");

        //Draw the starting cookie that is not filled in
        do CookieDrawings.drawBigPressedCookie(screenMid + (cookieRow * 32));
        
        // Main game loop
        while (true) {
            let key = Keyboard.keyPressed();
            let  i = 0;
            // let upgradeElement = upgrades[i];

            // Handle key presses
            if (key=0) { // If no key is pressed
                let isAnyKeyPressed = false; // Set flag to false
            } else {
                if (~isAnyKeyPressed) { // If no key was pressed before
                    let isAnyKeyPressed = true; // Set flag to true
                    if (key = 32) { // Spacebar
                        do cookies.add(1); // Add 1 cookie
                        // let cookies = cookies + 1;
                        let isDrawingFullCookie = true; // Set flag to draw full cookie
                        let fullCookieTimer = 0; // Reset timer
                        let displayVisualOfCookies = true; // Set flag to display cookies
                    }
                    // Handle logic for pressing keys to buy upgrades
                    else {
                        while (i < totalAmountOf) {
                            if (key = keys[i]) {
                                let upgradeElement = upgrades[i];
                                let tempLongNum = LongNum.new();
                                do tempLongNum.add(upgradeElement.getCost()-1); // Deduct cost
                                if (cookies.greaterThan(tempLongNum)) {
                                    do cookies.subtract(tempLongNum); // Deduct cost
                                    do upgradeElement.getUpgrade(); // Upgrade cost and add an upgrade
                                    let displayVisualOfUpgrades = true; // Set flag to display upgrades
                                    do Sys.wait(5); // Prevents spamming of keys
                                    do ScoreBoard.eraseCookieLine(); // Erase the cookie line
                                }
                                

                            }
                            let i = i + 1;
                        }
                    }
                }
            }

            // Handle logic for upgrades (timers and cookies per second)
            do handleUpgradeLogic(); // Handle cursor logic

            // Handle drawing of cookie using frames
            let frameCounter = frameCounter + 1;
            if (frameCounter > 10) {
                //Reset frame counter
                let frameCounter = 0;
            }
            // Check if cookie is being pressed and draw the full cookie
            else {
                if (isDrawingFullCookie) {
                    do CookieDrawings.drawBigCookie(screenMid + (cookieRow * 32));
                    let fullCookieTimer = fullCookieTimer + 1;
                    if (fullCookieTimer > 4) { // Show cookie for 20 frames (1 second)
                        let isDrawingFullCookie = false; // Stop drawing full cookie
                        do CookieDrawings.drawBigPressedCookie(screenMid + (cookieRow * 32));
                        let fullCookieTimer = 0; // Reset timer
                        do Sys.wait(5); // Prevents spamming of keys
                    }
                }
            }

            //Handles updating of visuals 
            if (displayVisualOfCookies) {
                // Display and update the visuals of the cookies
                do ScoreBoard.printCookies(cookies);
                let displayVisualOfCookies = false;
                do Sys.wait(5);
            }

            if (displayVisualOfUpgrades) {
                // Display and update the visuals of the upgrades
                do ScoreBoard.printUpgrades(cps(), cursor, grandma, farm, mine, warehouse);
                let displayVisualOfUpgrades = false;
                do Sys.wait(1);
            }

            if (key = 140) { // Escape and leave game
                return;
            }
            
            do Sys.wait(5);
        }
        return;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
}