// A Jack implementation of a long variable that can store numbers up to thirty million
// Uses two ints together to get most of the 32 bits
// All rights reserved to hershel thomas

class LongNum {
    field int leftSide;
    field int rightSide;

    // Set a left side as a counter on how many times the 
    //rightSide reached 10,000. So in a sence the max number is 37,400,0000
    constructor LongNum new() {
        let leftSide = 0;
        let rightSide = 0;
        return this;
    }

    method LongNum get() {
        return this;
    }

    method int getLeftSide() {
        return leftSide;
    }

    method int getRightSide() {
        return rightSide;
    }

    // Add two longs
    method void addLong(LongNum other) {
        // Add the right side
        let rightSide = rightSide + other.getRightSide();
        // If the right side is greater than 9999 then add 1 to the left side
        if (rightSide > 9999) {
            let leftSide = leftSide + 1;
            let rightSide = rightSide - 10000;
        }
        // Add the left side
        let leftSide = leftSide + other.getLeftSide();
        return;
    }


    // Gets the value of the long
    method void add(int amount) {
        // IF we reached maximum of 10,000 oon right side we need to add 1 to the left side
        while (amount > 9999) {
            let leftSide = leftSide + 1;
            let amount = amount - 10000;
        }
        // Add the amount to the right side
        let rightSide = rightSide + amount;
        // If the right side is greater than 9999 then add 1 to the left side
        while (rightSide > 9999) {
            let leftSide = leftSide + 1;
            let rightSide = rightSide - 10000;
        }
        return;
    }


    // Set the value of the long to another long
    method void set(LongNum other) {
        let leftSide = other.getLeftSide();
        let rightSide = other.getRightSide();
        return;
    }
    

    // Subtract two longs 
    method void subtractLong(LongNum other) {
        // Subtract the right side
        let rightSide = rightSide - other.getRightSide();
        // If the right side is less than 0 then subtract 1 from the left side
        if (rightSide < 0) {
            let leftSide = leftSide - 1;
            let rightSide = rightSide + 10000;
        }
        // Subtract the left side
        let leftSide = leftSide - other.getLeftSide();
        return;
    }


    // Subtract the value of the long by a smaller int
    method void subtract(int amount) {
        while (amount > 0) {
            // If the right side is less than the amount then the left side needs to be subtracted by 1
            if (rightSide < amount) {
                let leftSide = leftSide - 1;
                let rightSide = 10000 - amount;
                let amount = amount - 10000;
            }
            // otherwise just subtract the right side
            else {
                let rightSide = rightSide - amount;
                if (amount > 0) {
                    let amount = amount - 10000; 
                }
                else {
                    let amount = 0;
                }   
            }   
        }
        return;
    }

    // Divide the long by a long
    // Example: 10050 / 100 = 100
    method void divideLong(LongNum other) {
        // Run the subtract method a bunch of times
        var LongNum zero;
        let zero = LongNum.new();
        // Check divide by zero (to avoid errors, if divide by zero then set to zero)
        if (other.getLeftSide() = 0) {
            if (other.getRightSide() = 0) {
                do set(zero);
                // Free memory
                do Memory.deAlloc(zero);
                return;
            }
        }
        
        // Perform subtraction similar to a chip
        while (greaterThanLong(other)) {
            do subtractLong(other);
            do zero.add(1);
        }
        do set(zero);

        // Free memory
        do Memory.deAlloc(zero);

        return;
    }

    // multiply the long by a long
    method void multiplyLong(LongNum other) {
        // declare variables
        var LongNum zero;
        var LongNum temp;
        let temp = LongNum.new();
        let zero = LongNum.new();

        // Check if zero
        if (other.getLeftSide() = 0) {
            if (other.getRightSide() = 0) {
                let leftSide = 0;
                let rightSide = 0;
                // Free memory
                do Memory.deAlloc(zero);
                do Memory.deAlloc(temp);
                return;
            }
              
        }
        do zero.add(1);
        do temp.set(this);
        
        // Perform addition similar to a chip
        // ExampleL: 5*3 = 5 + 5 + 5
        while (other.greaterThanLong(zero)) {
            do addLong(temp);
            do zero.add(1);
        }

        // Free memory
        do Memory.deAlloc(zero);
        do Memory.deAlloc(temp);
        
        return;
        
    }

    // check if the long is greater than another long
    method boolean greaterThanLong(LongNum other) {
        if (leftSide > other.getLeftSide()) {
            return true;
        }
        else {
            if (leftSide = other.getLeftSide()) {
                if (rightSide > other.getRightSide()) {
                    return true;
                }
            }
        }
        return false;
    }

    // check if the long is  greaterThan or equal to another long
    method boolean greaterThanOrEqualLong(LongNum other) {
        // No Negatives
        if (other.getRightSide()=0){
            if (other.getLeftSide()=0){
                return true;
            }
        }
        
        // Check if the left side is greater
        if (leftSide > other.getLeftSide()) {
            return true;
        }
        // Check if the left side is equal and the right side is greater
        else {
            if (leftSide = other.getLeftSide()) {
                if (rightSide > other.getRightSide()) {
                    return true;
                }
            }
        }
        
        return false;
    }

    // check if the long is less than another long
    method boolean lessThanLong(LongNum other) {
        if (leftSide < other.getLeftSide()) {
            return true;
        }
        else {
            if (leftSide = other.getLeftSide()) {
                if (rightSide < other.getRightSide()) {
                    return true;
                }
            }
        }
        return false;
    }

    // check if the long is less than or equal to another long
    method boolean lessThanOrEqualLong(LongNum other) {
        // No Negatives
        if (other.getRightSide()=0){
            if (other.getLeftSide()=0){
                return true;
            }
        }
        // Check if the left side is greater
        if (leftSide < other.getLeftSide()) {
            return true;
        }
        // Check if the left side is equal and the right side is smaller
        else {
            if (leftSide = other.getLeftSide()) {
                if (rightSide < other.getRightSide()) {
                    return true;
                }
            }
        }
        
        return false;
    }




    method void toString() {
        // Total zeros before right side
        var int totalZerosBeforeRight;
        var int i;
        var String right;
        let i = 0;
        let right = String.new(5);
        do right.setInt(rightSide);
        let totalZerosBeforeRight = 4 - right.length();

        // Print both sides together if we have a left side
        if (leftSide > 0) {
            do Output.printInt(leftSide);
            let i = 0;
            // Add the zeros before the next number (if none then skip)
            while (i < totalZerosBeforeRight) {
                do Output.printString("0");
                let i = i + 1;
            }
        }
        // Print the right side
        do Output.printInt(rightSide);

        // Free memory
        do Memory.deAlloc(totalZerosBeforeRight);
        do Memory.deAlloc(i);
        do Memory.deAlloc(right);


        return;
}
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
}

